
                             ATADRVR
                   ATA/ATAPI Low Level Driver
                          User's Guide

                         by Hale Landis

                           Version 14F


INTRODUCTION
------------

ATADRVR is Hale Landis' C code that shows the low level
programming required to configure and execute commands on ATA and
ATAPI devices.  Over the years this code has been updated to
support all of the ATA and now ATA/ATAPI standards.  This C code
has been placed into the public domain by Hale Landis.  This C
code has no copyright or other restrictions on how it is used.


USING ATADRVR
-------------

The best way to see how this code can be used is shown in the C
program files EXAMPLE1.C and EXAMPLE2.C.  ATADRVR provides all of
the funcitons and facilities needed to perform the low level I/O
port activities on an x86 computer so that ATA and ATAPI commands
can be executed.

ATADRVR also includes detailed low level and command history
tracing funcitons.


FILE ORGANIZATION
-----------------

ATADRVR source code is organized into two H files and several C
files.

The H files are:

   ATAIO.H
   ATAIOPD.H

The file ATAIO.H defines all of the "public" functions and data
for ATADRVR.  This file should be included into any program using
the ATADRVR functions.

The file ATAIOPD.H defines the "private" functions and data for
ATADRVR.  This file should NOT be included into programs using
the ATADRVR functions.

The C files are:

   ATAIOINT.C
   ATAIOISA.C
   ATAIOPCI.C
   ATAIOPIO.C
   ATAIOREG.C
   ATAIOSUB.C
   ATAIOTMR.C
   ATAIOTRC.C
   EXAMPLE1.C
   EXAMPLE2.C

The file ATAIOINT.C contains the x86 interrupt setup and handling
data and functions.  The public symbols in this file begin with
the characters "int_".

The file ATAIOISA.C contains the x86 ISA bus DMA functions.  The
public symbols in this file begin with characters "dma_isa_".

The file ATAIOPCI.C contains the x86 PCI Bus Mastering DMA
functions.  The public symbols in this file begin with characters
"dma_pci_".

The file ATAIOPIO.C contains the lowest level I/O port access
functions.  The public symbols in this file begin with characters
"pio_".

The file ATAIOREG.C contains ATA and ATAPI functions to perform
ATA Soft Reset, Non-Data, PIO Data IN, PIO Data Out and ATAPI
Packet command protocols.  The public symbols in this file begin
with characters "reg_".

The file ATAIOSUB.C contains severals "private" functions used by
ATADRVR.

The file ATAIOTMR.C contains the timer reading and command
timeout functions.  The public symbols in this file begin with
characters "tmr_".

The file ATAIOTRC.C contains the low level and command history
trace functions.  The public symbols in this file begin with
characters "trc_".

The file EXAMPLE1.C is an example of using ATADRVR to configure
an ATA device and execute a few commands.

The file EXAMPLE2.C is an example of using ATADRVR to configure
an ATAPI CD-ROM device and execute a few commands.

                              NOTE
                              ----

   If you use ATADRVR in a program you should use only the public
   symbols.  This will allow you too upgrade to newer versions of
   ATADRVR (assuming there will be new versions in the future)
   with minimum effort.  The private data and functions are
   subject to change in future versions of ATADRVR.


USING ATADRVR
-------------

Before using the ATADRVR code in your program, please review the
EXAMPLE1.C, EXAMPLE1.MAK, EXAMPLE2.C and EXAMPLE2.MAK files.
These files will provide a basic overview of how this driver code
can be used.

The basics of using ATADRVR, as shown in EXAMPLE1.C or
EXAMPLE2.C, are these:

1) #include "ataio.h" in your program.

2) Call pio_set_iobase_addr() or pio_set_memory_addr() to set the
   base I/O or memory address used by the ATA host adapter.

3) Call reg_config() so that ATADRVR can determine what devices
   are attached to the ATA host adapter.

4) Call reg_reset() or any of the other "reg" functions to issue
   ATA or ATAPI commands in PIO data transfer mode.

ATADRVR has been developed using Borland C and can be compiled in
any x86 real mode memory mode.

Each of the public functions and symbols of ATADRVR are described
below in alphabetical order.


Functions And Data In ATAIOINT.C
--------------------------------

These functions setup interrupt handling for the ATA host
adapter.  Interrupts are not required in order to execute ATA or
ATAPI commands but are usually used.  If int_enable_irq() is
called, then int_disable_irq() MUST be called before your program
exits (otherwise your system might hang).  The functions
int_enable_irq() and int_disable_irq() may be called multiple
times in order to switch between polling and interrupt mode on a
command by command basis.

void int_disable_irq( void );

   Disable interrupt use.

int int_enable_irq( int irqNum );      // use irq 8 to 15

   Enable interrupt use.  Only IRQ numbers 8 to 15 are allowed.

int int_irq_number;

   This value is READONLY -- DO NOT ALTER.

   This is the current IRQ number in use.

int int_int_vector;

   This value is READONLY -- DO NOT ALTER.

   This is the current x86 INT number in use.  IRQ 8 uses INT
   70H, IRQ 9 uses INT 71H, etc.

int int_use_intr_flag;

   This value is READONLY -- DO NOT ALTER.

   The value is not zero if an IRQ is currently configured.


Functions And Data In ATAIOISA.C
--------------------------------

These functions setup ISA bus DMA (ATA Multiword DMA) and perform
ATA and ATAPI commands using DMA.  The function dma_isa_config()
MUST be called with no error before any of the other functions
will attempt to execute a command.

int dma_isa_ata( int dev,                    // device (0 or 1)
                 int cmd,                    // command register
                 int fr,                     // feature register
                 int sc,                     // sector count
                 unsigned int cyl,           // CHS cylinder high/low
                 int head,                   // CHS head
                 int sect,                   // CHS sector
                 unsigned seg,               // buffer address
                 unsigned off );             // buffer address

   Execute an ATA Read DMA (C8H) or ATA Write DMA (CAH) command
   using CHS sector addressing.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

int dma_isa_ata_lba( int dev,                // device (0 or 1)
                     int cmd,                // command register
                     int fr,                 // feature register
                     int sc,                 // sector count
                     long lba,               // LBA
                     unsigned seg,           // buffer address
                     unsigned off );         // buffer address

   Execute an ATA Read DMA (C8H) or ATA Write DMA (CAH) command
   using LBA sector addressing.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

int dma_isa_config( int chan );

   Configure ATADRVR to use ISA bus DMA (ATA Multiword DMA) on
   ISA DMA Channel 5, 6 or 7.

int dma_isa_packet( int dev,                 // device (0 or 1)
                    unsigned int cpbc,       // command packet size
                    unsigned int cpseg,      // command packet buffer
                    unsigned int cpoff,      // command packet buffer
                    int dir,                 // 0 for no data or read, 1 for write
                    unsigned int dpbc,       // max data packet size
                    unsigned int dpseg,      // data packet buffer
                    unsigned int dpoff );    // data packet buffer

   Execute an ATAPI Packet (A0H) command in DMA mode.  Note that
   the first byte of the Commmand Packet buffer is the command
   code of the "SCSI CDB" that is to be executed by the device.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.


Functions And Data In ATAIOPCI.C
--------------------------------

These functions setup PCI bus DMA (ATA Multiword or Ultra DMA)
and perform ATA and ATAPI commands using DMA.  The function
dma_pci_config() MUST be called with no error before any of the
other functions will attempt to execute a command.

int dma_pci_ata( int dev,                    // device (0 or 1)
                 int cmd,                    // command register
                 int fr,                     // feature register
                 int sc,                     // sector count
                 unsigned int cyl,           // CHS cylinder high/low
                 int head,                   // CHS head
                 int sect,                   // CHS sector
                 unsigned seg,               // buffer address
                 unsigned off );             // buffer address

   Execute an ATA Read DMA (C8H) or ATA Write DMA (CAH) command
   using CHS sector addressing.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

int dma_pci_ata_lba( int dev,                // device (0 or 1)
                     int cmd,                // command register
                     int fr,                 // feature register
                     int sc,                 // sector count
                     long lba,               // LBA
                     unsigned seg,           // buffer address
                     unsigned off );         // buffer address

   Execute an ATA Read DMA (C8H) or ATA Write DMA (CAH) command
   using LBA sector addressing.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

int dma_pci_config( unsigned int regAddr );

   Configure ATADRVR to use ISA bus DMA (ATA Multiword DMA) on
   ISA DMA Channel 5, 6 or 7.

int dma_pci_packet( int dev,                 // device (0 or 1)
                    unsigned int cpbc,       // command packet size
                    unsigned int cpseg,      // command packet buffer
                    unsigned int cpoff,      // command packet buffer
                    int dir,                 // 0 for no data or read, 1 for write
                    unsigned int dpbc,       // max data packet size
                    unsigned int dpseg,      // data packet buffer
                    unsigned int dpoff );    // data packet buffer

   Execute an ATAPI Packet (A0H) command in DMA mode.  Note that
   the first byte of the Commmand Packet buffer is the command
   code of the "SCSI CDB" that is to be executed by the device.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

unsigned int dma_pci_prd_addr;        // SFF-8038 PRD address

   This value is READONLY -- DO NOT ALTER.

   This value is the segment address of the SFF-8038 PRD buffer.
   This value is determined by dma_pci_config().

unsigned int dma_pci_sff_reg_addr;    // SFF-8038 reg address

   This value is READONLY -- DO NOT ALTER.

   This value is the segment address of the SFF-8038 I/O
   registers.  The value is set by dma_pci_config().

   Note that in order to use PCI DMA the calling program must
   determine the current address of the SFF-8038 I/O registers.


Functions And Data In ATAIOPIO.C
--------------------------------

These functions setup the ATA host adapter I/O port address (or
in PCMCIA PC Card ATA Memory mode, the host adapter memory
address).  The function pio_set_iobase_addr() (or
pio_set_memory_addr()) MUST be the first function called in order
to initialize ATADRVR.  However, normal usage of ATADRVR does NOT
require calling any of the other pio functions.  But if you
needed to create you own unique command protocol, these functions
can be used directly.

unsigned int pio_base_addr1;

   This value is READONLY -- DO NOT ALTER.

   This is the base I/O address of the ATA Command Block
   registers.  This value is set by pio_set_iobase_addr().

unsigned int pio_base_addr2;

   This value is READONLY -- DO NOT ALTER.

   This is the base I/O address of the ATA Control Block
   registers.  This value is set by pio_set_iobase_addr().

unsigned char pio_inbyte( unsigned int addr );

   Read one ATA command or control block register. addr MUST be
   one of the following values (as defined in ATAIO.H):  CB_DATA,
   CB_ERR, CB_FR, CB_SC, CB_SN, CB_CL, CB_CH, CB_DH, CB_STAT,
   CB_CMD, CB_ASTA, CB_DC, CB_DA.

unsigned int pio_inword( unsigned int addr );

   Read two ATA command or control block registers. addr MUST be
   one of the following values (as defined in ATAIO.H):  CB_DATA,
   CB_ERR, CB_FR, CB_SC, CB_SN, CB_CL, CB_CH, CB_DH, CB_STAT,
   CB_CMD, CB_ASTA, CB_DC, CB_DA.

   Note: ATADRVR does not use this function.

unsigned char pio_last_read[10];

   This value is READONLY -- DO NOT ALTER.

   This array contains the last data read from each of the ATA
   command or control block registers.  Index into this array
   using the values (as defined in ATAIO.H):  CB_DATA, CB_ERR,
   CB_FR, CB_SC, CB_SN, CB_CL, CB_CH, CB_DH, CB_STAT, CB_CMD,
   CB_ASTA, CB_DC, CB_DA.

unsigned char pio_last_write[10];

   This value is READONLY -- DO NOT ALTER.

   This array contains the last data written to each of the ATA
   command or control block registers.  Index into this array
   using the values (as defined in ATAIO.H):  CB_DATA, CB_ERR,
   CB_FR, CB_SC, CB_SN, CB_CL, CB_CH, CB_DH, CB_STAT, CB_CMD,
   CB_ASTA, CB_DC, CB_DA.

unsigned int pio_memory_seg;

   This value is READONLY -- DO NOT ALTER.

   This is the base memory address of the ATA Command and Control
   Block registers in PCMCIA PC Card ATA Memory mode.  This value
   is set by pio_set_memory_addr().

int pio_memory_dt_opt;

   This value is used only in PCMCIA PC Card ATA Memory mode.
   The value controls how ATADRVR reads/write the ATA Data
   register.  It can be set to the following values (see
   ATAIO.H):

   PIO_MEMORY_DT_OPT0  -  use Data reg at offset 0H
   PIO_MEMORY_DT_OPT8  -  use Data reg at offset 8H
   PIO_MEMORY_DT_OPTB  -  use Data reg at offsets 400-7ffH
   PIO_MEMORY_DT_OPTR  -  randomly select these options

   The default is PIO_MEMORY_DT_OPT0.

void pio_outbyte( unsigned int addr,
                  unsigned char data );

   Write one ATA command or control block register. addr MUST be
   one of the following values (as defined in ATAIO.H):  CB_DATA,
   CB_ERR, CB_FR, CB_SC, CB_SN, CB_CL, CB_CH, CB_DH, CB_STAT,
   CB_CMD, CB_ASTA, CB_DC, CB_DA.

void pio_outword( unsigned int addr,
                  unsigned int data );

   Write two ATA command or control block registers. addr MUST be
   one of the following values (as defined in ATAIO.H):  CB_DATA,
   CB_ERR, CB_FR, CB_SC, CB_SN, CB_CL, CB_CH, CB_DH, CB_STAT,
   CB_CMD, CB_ASTA, CB_DC, CB_DA.

   Note: ATADRVR does not use this function.

unsigned int pio_reg_addrs[10];

   This value is READONLY -- DO NOT ALTER.

   This array provides the actually I/O addresses for the ATA
   Command and Control Block registers.  This array is not
   useful in PCMCIA PC Card ATA Memory mode.

void pio_rep_inbyte( unsigned int addrDataReg,     // register address
                     unsigned int bufSeg,          // buffer address
                     unsigned int bufOff,          // buffer address
                     unsigned int byteCnt );       // byte count

   Use the REP INS instruction to read the ATA Data Register
   during PIO data transfer.  Note that this function is called
   by pio_rep_inword() but only if pio_xfer_width is 8.

void pio_rep_indword( unsigned int addrDataReg,    // register address
                      unsigned int bufSeg,         // buffer address
                      unsigned int bufOff,         // buffer address
                      unsigned int dwordCnt );     // dword count

   Use the REP INSD instruction to read the ATA Data Register
   during PIO data transfer.  Note that this function is called
   by pio_rep_inword() but only if:  1) pio_xfer_width is 32
   and 2) the number of bytes to be read is a multiple of 4.

void pio_rep_inword( unsigned int addrDataReg,     // register address
                     unsigned int bufSeg,          // buffer address
                     unsigned int bufOff,          // buffer address
                     unsigned int wordCnt );       // word count

   Use the REP INSW instruction to read the ATA Data Register
   during PIO data transfer. This function may call pio_rep_inbyte()
   or pio_rep_indword() if pio_xfer_width is not 16.

void pio_rep_outbyte( unsigned int addrDataReg,   // register address
                      unsigned int bufSeg,        // buffer address
                      unsigned int bufOff,        // buffer address
                      unsigned int bytedCnt );    // byte count

   Use the REP OUTS instruction to write the ATA Data Register
   during PIO data transfer.  Note that this function is called
   by pio_rep_outword() but only if pio_xfer_width is 8.

void pio_rep_outdword( unsigned int addrDataReg,   // register address
                       unsigned int bufSeg,        // buffer address
                       unsigned int bufOff,        // buffer address
                       unsigned int dwordCnt );    // dword count

   Use the REP OUTSD instruction to write the ATA Data Register
   during PIO data transfer.  Note that this function is called
   by pio_rep_outword() but only if:  1) pio_xfer_width is 32
   and 2) the number of bytes to be written is a multiple of 4.

void pio_rep_outword( unsigned int addrDataReg,    // register address
                      unsigned int bufSeg,         // buffer address
                      unsigned int bufOff,         // buffer address
                      unsigned int wordCnt );      // word count

   Use the REP OUTSW instruction to write the ATA Data Register
   during PIO data transfer. This function may call pio_rep_outbyte()
   or pio_rep_outdword() if pio_xfer_width is not 16.

void pio_set_iobase_addr( unsigned int base1,
                          unsigned int base2 );

   Either pio_set_iobase_addr() or pio_set_memory_addr() must be
   called before any other ATADRVR functions can be used!

   Configure the ATA host adapter's I/O port addresses.  Normal
   calls to this function are:

      pio_set_iobase_addr( 0x1f0, 0x3f0 ) // primary
      pio_set_iobase_addr( 0x170, 0x370 ) // secondary

   For PCMCIA PC Card ATA Contiguous I/O mode use:

      pio_set_iobase_addr( addr, addr+8 )

   where the least significant 4 bits of addr are zero.  Note
   that the calling program must find a contiguous set of 16 I/O
   port addresses that are not in use in order to use this PCMCIA
   I/O mode.  See the documentation file PCC.UG!

void pio_set_memory_addr( unsigned int seg );

   Either pio_set_iobase_addr() or pio_set_memory_addr() must be
   called before any other ATADRVR functions can be used!

   Configure the ATA host adapter's memory address in PCMCIA PC
   Card ATA Memory mode.  Note that the calling program must find
   a 4K block of memory that is not in use in order to use this
   PCMCIA mode.  See the documentation file PCC.UG!

int pio_use_dword;

   NOTE: pio_use_dword has been replaced by pio_xfer_width !

int pio_xfer_width;

   This variable controls the width of PIO data transfers.
   This variable can have the following values:

   8 = 8-bits. PIO transfers will use REP INS and REP OUTS
       or 8-bit memory write/read in PCMCIA Memory mode.

   16 = 16-bits. PIO transfers will use REP INSW and REP OUTSW
        or 16-bit memory write/read in PCMCIA Memory mode.

   32 = 32-bits. PIO transfers will use REP INSD and REP OUTSD.

   Any other value is treated the same as 16.

   The default value is 16.

   See the pio_rep_*() functions above.

   Use this ATADRVR feature with great care and read the
   documentation file PIO.UG!


Functions And Data In ATAIOREG.C
--------------------------------

These functions provide the basic ATA and ATAPI command protocol
functions.  The function reg_config() MUST be called after
calling pio_set_iobase_addr() (or pio_set_memory_addr()).
Failure to call reg_config() will cause ATADRVR to operate
incorrectly.

int reg_atapi_delay_flag;

   Many ATAPI devices are very poorly designed and do not follow
   the ATA or ATAPI protocols as defined by SFF-8020 or by the
   ATA/ATAPI-4 standard.  Setting this word to a non-zero value
   causes ATADRVR to insert an approximately 100ms delay into the
   ATA and/or ATAPI command protocols.  This delay seems to allow
   enough time for these non-conforming devices to operate
   correctly.

long reg_atapi_max_bytes;

   Many ATAPI devices have a "run away" data transfer problem.
   This value sets the upper limit for the amount of data can be
   transfered by an ATAPI Packet command in PIO mode.  This value
   is reset to 32768 at the end of every ATAPI Packet command.
   The calling program may set this value to a smaller value (for
   example, if an ATAPI Request Sense command is about to be
   executed).  This prevents the calling program's data buffer
   from being overrun.

unsigned char reg_atapi_reg_fr;
unsigned char reg_atapi_reg_sc;
unsigned char reg_atapi_reg_sn;
unsigned char reg_atapi_reg_dh;  // only bits 3,2,1,0 are used

   These values are placed into the Feature, Sector Count, Sector
   Number and Device/Head register by the reg_packet() function
   before the A0H command is started.  These values are then set
   to zero before reg_packet() returns.

struct REG_CMD_INFO
{
   unsigned char flg;         // see TRC_FLAG_xxx in ATAIO.H
   unsigned char ct;          // see TRC_TYPE_xxx in ATAIO.H
   unsigned char cmd;         // command code
   unsigned char fr1;         // feature reg before
      ... See ATAIO.H ...
   unsigned char dc1;         // device control before
   unsigned char ec;          // ATADRVR error code
   unsigned char to;          // not zero if time out error
   unsigned char st2;         // status reg after
      ... See ATAIO.H ...
   unsigned char dh2;         // device head after
   long totalBytesXfer;       // total bytes transfered
   unsigned int failbits;     // failure bits (protocol violation bits)
   long drqPackets;           // number of PIO DRQ data packets
} ;
struct REG_CMD_INFO reg_cmd_info;

   This data structure contains all the "before" and "after"
   information for the last command or reset executed.

int reg_config( void );

   This function MUST be called so that ATADRVR can correctly
   configure itself. reg_config() sets the values into
   reg_config_info[2].

int reg_config_info[2];

   This array is set by calling reg_config(). reg_config_info[0]
   describes device 0 and reg_config_info[1] describes device 1.
   The possible values in these words are (see ATAIO.H):
   REG_CONFIG_TYPE_NONE, REG_CONFIG_TYPE_UNKN,
   REG_CONFIG_TYPE_ATA, REG_CONFIG_TYPE_ATAPI.

   Note that ATADRVR is not able to determine the type of some
   devices.  However, after issuing some commands the calling
   program may be able to determine the exact type of a device.
   The calling program may change the values in this array but
   this must be done very carefully:

   a) DO NOT CHANGE the value REG_CONFIG_TYPE_NONE.
   b) DO NOT CHANGE a value to REG_CONFIG_TYPE_NONE.
   c) The value REG_CONFIG_TYPE_UNKN can be changed to either
      REG_CONFIG_TYPE_ATA or REG_CONFIG_TYPE_ATAPI.

int reg_atapi_cp_size;
unsigned char reg_atapi_cp_data[16];

   These values are READONLY -- DO NOT ALTER.

   reg_atapi_cp_size is the size of the most recent ATAPI command
   packet size (normally 12 or 16). reg_atapi_cp_data[16] is the
   most recent ATAPI command packet (SCSI CDB) data.

int reg_non_data( int dev,                   // device (0 or 1)
                  int cmd,                   // command register
                  int fr,                    // feature register
                  int sc,                    // sector count
                  unsigned int cyl,          // CHS cylinder high/low
                  int head,                  // CHS head
                  int sect );                // CHS sector

   Execute an ATA Non-Data command using CHS sector addressing.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

int reg_non_data_lba( int dev,               // device (0 or 1)
                      int cmd,               // command register
                      int fr,                // feature register
                      int sc,                // sector count
                      long lba );            // LBA

   Execute an ATA Non-Data command using LBA sector addressing.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

int reg_packet( int dev,                     // device (0 or 1)
                unsigned int cpbc,           // command packet size
                unsigned int cpseg,          // command packet buffer
                unsigned int cpoff,          // command packet buffer
                int dir,                     // 0 for no data or read, 1 for write
                unsigned int dpbc,           // max data packet size
                unsigned int dpseg,          // data packet buffer
                unsigned int dpoff );        // data packet buffer

   Execute an ATAPI Packet (A0H) command in PIO mode.  Note that
   the first byte of the Commmand Packet buffer is the command
   code of the "SCSI CDB" that is to be executed by the device.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

int reg_pio_data_in( int dev,                // device (0 or 1)
                     int cmd,                // command register
                     int fr,                 // feature register
                     int sc,                 // sector count
                     unsigned int cyl,       // CHS cylinder high/low
                     int head,               // CHS head
                     int sect,               // CHS sector
                     unsigned seg,           // buffer address
                     unsigned off,           // buffer address
                     int numSect,            // number of sectors to transfer
                     int multiCnt );         // current multiple count

   Execute an ATA PIO Data Out command in CHS sector addressing
   mode.

   numSect is the actual number of sectors to be transfered.
   This value may be different than the sc value.

   If cmd is C4H (Read Multiple) then multiCnt MUST be set to the
   current sectors per block.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

int reg_pio_data_in_lba( int dev,            // device (0 or 1)
                         int cmd,            // command register
                         int fr,             // feature register
                         int sc,             // sector count
                         long lba,           // LBA
                         unsigned seg,       // buffer address
                         unsigned off,       // buffer address
                         int numSect,        // number of sectors to transfer
                         int multiCnt );     // current multiple count

   Execute an ATA PIO Data Out command in LBA sector addressing
   mode.

   numSect is the actual number of sectors to be transfered.
   This value may be different than the sc value.

   If cmd is C4H (Read Multiple) then multiCnt MUST be set to the
   current sectors per block.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

int reg_pio_data_out( int dev,               // device (0 or 1)
                      int cmd,               // command register
                      int fr,                // feature register
                      int sc,                // sector count
                      unsigned int cyl,      // CHS cylinder high/low
                      int head,              // CHS head
                      int sect,              // CHS sector
                      unsigned seg,          // buffer address
                      unsigned off,          // buffer address
                      int numSect,           // number of sectors to transfer
                      int multiCnt );        // current multiple count

   Execute an ATA PIO Data Out command in CHS sector addressing
   mode.

   numSect is the actual number of sectors to be transfered.
   This value may be different than the sc value.

   If cmd is C5H (Write Multiple) then multiCnt MUST be set to
   the current sectors per block.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

int reg_pio_data_out_lba( int dev,           // device (0 or 1)
                          int cmd,           // command register
                          int fr,            // feature register
                          int sc,            // sector count
                          long lba,          // LBA
                          unsigned seg,      // buffer address
                          unsigned off,      // buffer address
                          int numSect,       // number of sectors to transfer
                          int multiCnt );    // current multiple count

   Execute an ATA PIO Data Out command in LBA sector addressing
   mode.

   numSect is the actual number of sectors to be transfered.
   This value may be different than the sc value.

   If cmd is C5H (Write Multiple) then multiCnt MUST be set to
   the current sectors per block.

   Returns 0 if no error or 1 if there is an error.  See the
   contents of reg_cmd_info.

int reg_reset( int skipFlag,                 // skip flag
               int devRtrn );                // device's data returned

   Execute an ATA Soft Reset.  Set skipFlag to a non-zero value
   to bypass the setting of the SRST bit to 0 and then to 1 (used
   in some diagnostic programs).  Set devRtrn to 0 or 1 to
   determine which device's register contents are returned in
   reg_cmd_info.

int reg_slow_xfer_flag;

   Set this word to a non-zero value to cause ATADRVR to insert a
   0 to 55ms delay into ATA and ATAPI commands in PIO mode.  This
   simulates a very slow host system and is know to cause various
   problems for devices (such as buffer overruns and or
   underruns, firmware hangs, etc).

   For ATA PIO commands, if the value is zero or greater than
   numSect, no delay is inserted, else the delay is inserted when
   the number of sector remaining to be transferred is less than
   this value.

   For ATAPI PIO commands, if the value is zero or greater than
   the number of DRQ blocks transferred by the device, no delay
   is inserted, else the delay is inserted prior to the DRQ block
   number specified by this value.


Functions And Data In ATAIOTMR.C
--------------------------------

These functions provide the command timeout functions used by
ATADRVR.  Normally these functions are called only by ATADRVR.

int tmr_chk_timeout( void );

   Used by ATADRVR to check if a command or reset has timed out.
   The function tmr_set_timeout() MUST be called before using
   this function to time a command or reset.

long tmr_read_bios_timer( void );

   Used by ATADRVR to read the current contents of the BIOS
   timer.  Normally this value increments every 55ms and is reset
   to zero at midnight.

void tmr_set_timeout( void );

   Used by ATADRVR to set the timeout time for a command or
   reset.  The value tmr_time_out is added to the current time
   and this becomes the time that is checked whenever
   tmr_chk_timeout() is called.

long tmr_time_out;

   This value is the command timeout value in seconds.  ATADRVR
   assumes a device is hung if a command or reset requires more
   than this number of seconds to complete.  The default is 20
   (20 seconds).  Note that some ATA commands (such as power
   management may require this value be set larger (perhaps to
   40).


Functions And Data In ATAIOTRC.C
--------------------------------

These functions are the public interface to the command history
and low level trace facility or ATADRVR.

unsigned char * trc_get_cmd_name( unsigned char flg,
                                  unsigned char cc );

   Return a pointer to a character string that is the name of an
   ATA command. flg MUST be one of the following values (as
   defined in ATAIO.H):  TRC_FLAG_SRST or TRC_FLAG_ATA or
   TRC_FLAG_ATAPI. cc is the ATA command code (the value is
   ignored if flg is TRC_FLAG_SRST).

unsigned char * trc_get_er_bit_name( unsigned char er );

   Return a pointer to a character string that is the list of
   error bits that are 1 in the ATA Error register. er is assumed
   to be a value read from the ATA Error register.

unsigned char * trc_get_err_name( int ec );

   Return a pointer to a character string that describes the
   ATADRVR error code (ec).

unsigned char * trc_get_st_bit_name( unsigned char st );

   Return a pointer to a character string that is the list of
   status bits that are 1 in the ATA Error register. st is
   assumed to be a value read from the ATA Status or Alternate
   Status register.

void trc_err_dump1( void );
unsigned char * trc_err_dump2( void );

   Use these funcitons to return a set of character strings that
   describe the results of the last command executed.  See
   EXAMPLE1.C or EXAMPLE2.C for details on how to call these
   functions.

void trc_cht_dump0( void );
void trc_cht_dump1( void );
unsigned char * trc_cht_dump2( void );

   Use these funcitons to return a set of character strings that
   are the current contents of the command history trace buffer.
   See EXAMPLE1.C or EXAMPLE2.C for details on how to call these
   functions.

void trc_cht_types( int type );

   The types of commands that are traced in the command history
   can be restricted to the types specified in this function
   call. type MUST be one of these values (as defined in
   ATAIO.H):  TRC_TYPE_ALL, TRC_TYPE_NONE, TRC_TYPE_ADMAI,
   TRC_TYPE_ADMAO, TRC_TYPE_AND, TRC_TYPE_APDI, TRC_TYPE_APDO,
   TRC_TYPE_ASR, TRC_TYPE_PDMAI, TRC_TYPE_PDMAO, TRC_TYPE_PND,
   TRC_TYPE_PPDI, TRC_TYPE_PPDO.

void trc_llt_dump0( void );
void trc_llt_dump1( void );
unsigned char * trc_llt_dump2( void );

   Use these funcitons to return a set of character strings that
   are the current contents of the low level trace buffer.  See
   EXAMPLE1.C or EXAMPLE2.C for details on how to call these
   functions.


QUESTIONS OR PROBLEMS?
----------------------

Send your question(s) or problem description(s) to Hale Landis
via email at this address:

   hlandis@ata-atapi.com

Visit Hale's web site:

   www.ata-atapi.com

/end/
